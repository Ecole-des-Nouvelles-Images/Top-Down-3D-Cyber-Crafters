//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAsset"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""f5714ab9-7059-452a-9785-13dc5ae46959"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""340dde3a-b0e4-48d7-b8a6-d5db7a573d77"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""684aa638-14f1-48ad-ab91-310ed5eab396"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""587c1cfb-a406-45b2-9adb-e0402f7559cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""dada2040-4e1e-4835-99a6-e4b168d0dd31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""c61210da-f3e8-4cd6-9911-2e480e6c1206"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector Joystick"",
                    ""id"": ""19488104-060e-4792-b4f3-70d3bc9a9e76"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""456e8c33-7a1c-4af7-9d5a-c87eb36ff401"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a4ddb718-ad8d-4c0e-a647-36652269950f"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dda751f4-3d40-45c7-9cc1-a58b06fcacb2"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1795d35f-d12c-4093-a6c8-e293a39cb6c3"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""87494b85-5520-48a2-b4cb-443c0ad89b12"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a71959c3-60b6-451f-b333-e6d48dc4660b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c1690dd-1d57-41df-83d2-9a88c2299a46"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57606c66-6940-41cb-ba09-7f7b51e49bbc"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Turret"",
            ""id"": ""8686dd0f-d4b2-4466-bb68-ee1ead41646b"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""0a9b8576-8bd6-4ef8-8fda-c3c73f0a1dd4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""fb1ee17b-324c-477b-aca2-5054144db27c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""e5faa46a-ff2e-46ae-83e4-cfa65c6e16b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e4058bb7-971c-4714-84bb-0ae74fab73d0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fe754a71-7891-4d0b-9f3d-d92d5108a33e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fc22888b-a088-454e-a075-8917c4cf8c05"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0bdc5352-4348-4831-9a9e-2b23e9ccdc5a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f9845879-8977-4ce0-af45-3827050490cc"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ac8f9fc7-c9a0-433d-a5e3-29dd9a0d7aa5"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4253685b-b929-4ec2-a194-1c4bdf9c4f02"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovingEnclume"",
            ""id"": ""8ccd0c69-1284-4970-81de-a53056802ab6"",
            ""actions"": [
                {
                    ""name"": ""MoveEnclume"",
                    ""type"": ""Value"",
                    ""id"": ""27babf91-afa2-4554-8268-d37a95c75719"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""657c8f1e-037e-4354-9789-71b0eff5ed36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""f2d923d9-b13c-4775-ab53-f396e76683ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57288d22-daba-424d-ab00-2d069c8e94c7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveEnclume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df715100-ac47-4789-9417-505d735c31ab"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab8b4721-75a5-446c-a445-bbedcda5f95e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GareStation"",
            ""id"": ""669d9d7b-308d-40e3-913b-5585c8fa1d14"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""9d5e3148-8511-4a83-abb4-2609b6486fb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""5df56e8e-0dd5-4356-977d-ac12d70b0548"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Buy"",
                    ""type"": ""Button"",
                    ""id"": ""ae780ee0-1184-4a8e-b301-cfa84affc15a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Leave"",
                    ""type"": ""Button"",
                    ""id"": ""46f3039d-15d3-4ffa-980a-bb7924efde6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""265a4454-b3b3-4e56-a46f-e12ef7d5d2bf"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""424e1eee-d3e0-42ff-a941-e60863bfcf6c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f23b1d8-8b8f-4296-8978-c8acecbca68a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Buy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2d2574e-a51d-4cc4-b0bd-c756aaed24e3"",
                    ""path"": ""<Gamepad>/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Leave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Lobby"",
            ""id"": ""3689919d-fbd7-49bb-bd20-6a8ae3471d49"",
            ""actions"": [
                {
                    ""name"": ""MoveLobby"",
                    ""type"": ""Value"",
                    ""id"": ""9456b7b5-8006-441f-af10-3331b5aa5cdf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Validate"",
                    ""type"": ""Button"",
                    ""id"": ""ea4bc0d1-65a2-4483-a2c6-091d6f54145e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""628d2da9-f3b3-4c90-8f96-36c5cdc70f00"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLobby"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc68d1a5-3582-46e9-91a9-d77d3b8a3bcc"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Validate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_A = m_Gameplay.FindAction("A", throwIfNotFound: true);
        m_Gameplay_B = m_Gameplay.FindAction("B", throwIfNotFound: true);
        m_Gameplay_X = m_Gameplay.FindAction("X", throwIfNotFound: true);
        m_Gameplay_Y = m_Gameplay.FindAction("Y", throwIfNotFound: true);
        // Turret
        m_Turret = asset.FindActionMap("Turret", throwIfNotFound: true);
        m_Turret_Aim = m_Turret.FindAction("Aim", throwIfNotFound: true);
        m_Turret_Shoot = m_Turret.FindAction("Shoot", throwIfNotFound: true);
        m_Turret_Exit = m_Turret.FindAction("Exit", throwIfNotFound: true);
        // MovingEnclume
        m_MovingEnclume = asset.FindActionMap("MovingEnclume", throwIfNotFound: true);
        m_MovingEnclume_MoveEnclume = m_MovingEnclume.FindAction("MoveEnclume", throwIfNotFound: true);
        m_MovingEnclume_Drop = m_MovingEnclume.FindAction("Drop", throwIfNotFound: true);
        m_MovingEnclume_Exit = m_MovingEnclume.FindAction("Exit", throwIfNotFound: true);
        // GareStation
        m_GareStation = asset.FindActionMap("GareStation", throwIfNotFound: true);
        m_GareStation_Left = m_GareStation.FindAction("Left", throwIfNotFound: true);
        m_GareStation_Right = m_GareStation.FindAction("Right", throwIfNotFound: true);
        m_GareStation_Buy = m_GareStation.FindAction("Buy", throwIfNotFound: true);
        m_GareStation_Leave = m_GareStation.FindAction("Leave", throwIfNotFound: true);
        // Lobby
        m_Lobby = asset.FindActionMap("Lobby", throwIfNotFound: true);
        m_Lobby_MoveLobby = m_Lobby.FindAction("MoveLobby", throwIfNotFound: true);
        m_Lobby_Validate = m_Lobby.FindAction("Validate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_A;
    private readonly InputAction m_Gameplay_B;
    private readonly InputAction m_Gameplay_X;
    private readonly InputAction m_Gameplay_Y;
    public struct GameplayActions
    {
        private @InputAsset m_Wrapper;
        public GameplayActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @A => m_Wrapper.m_Gameplay_A;
        public InputAction @B => m_Wrapper.m_Gameplay_B;
        public InputAction @X => m_Wrapper.m_Gameplay_X;
        public InputAction @Y => m_Wrapper.m_Gameplay_Y;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Turret
    private readonly InputActionMap m_Turret;
    private List<ITurretActions> m_TurretActionsCallbackInterfaces = new List<ITurretActions>();
    private readonly InputAction m_Turret_Aim;
    private readonly InputAction m_Turret_Shoot;
    private readonly InputAction m_Turret_Exit;
    public struct TurretActions
    {
        private @InputAsset m_Wrapper;
        public TurretActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aim => m_Wrapper.m_Turret_Aim;
        public InputAction @Shoot => m_Wrapper.m_Turret_Shoot;
        public InputAction @Exit => m_Wrapper.m_Turret_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Turret; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurretActions set) { return set.Get(); }
        public void AddCallbacks(ITurretActions instance)
        {
            if (instance == null || m_Wrapper.m_TurretActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TurretActionsCallbackInterfaces.Add(instance);
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(ITurretActions instance)
        {
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(ITurretActions instance)
        {
            if (m_Wrapper.m_TurretActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITurretActions instance)
        {
            foreach (var item in m_Wrapper.m_TurretActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TurretActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TurretActions @Turret => new TurretActions(this);

    // MovingEnclume
    private readonly InputActionMap m_MovingEnclume;
    private List<IMovingEnclumeActions> m_MovingEnclumeActionsCallbackInterfaces = new List<IMovingEnclumeActions>();
    private readonly InputAction m_MovingEnclume_MoveEnclume;
    private readonly InputAction m_MovingEnclume_Drop;
    private readonly InputAction m_MovingEnclume_Exit;
    public struct MovingEnclumeActions
    {
        private @InputAsset m_Wrapper;
        public MovingEnclumeActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveEnclume => m_Wrapper.m_MovingEnclume_MoveEnclume;
        public InputAction @Drop => m_Wrapper.m_MovingEnclume_Drop;
        public InputAction @Exit => m_Wrapper.m_MovingEnclume_Exit;
        public InputActionMap Get() { return m_Wrapper.m_MovingEnclume; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovingEnclumeActions set) { return set.Get(); }
        public void AddCallbacks(IMovingEnclumeActions instance)
        {
            if (instance == null || m_Wrapper.m_MovingEnclumeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovingEnclumeActionsCallbackInterfaces.Add(instance);
            @MoveEnclume.started += instance.OnMoveEnclume;
            @MoveEnclume.performed += instance.OnMoveEnclume;
            @MoveEnclume.canceled += instance.OnMoveEnclume;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IMovingEnclumeActions instance)
        {
            @MoveEnclume.started -= instance.OnMoveEnclume;
            @MoveEnclume.performed -= instance.OnMoveEnclume;
            @MoveEnclume.canceled -= instance.OnMoveEnclume;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IMovingEnclumeActions instance)
        {
            if (m_Wrapper.m_MovingEnclumeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovingEnclumeActions instance)
        {
            foreach (var item in m_Wrapper.m_MovingEnclumeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovingEnclumeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovingEnclumeActions @MovingEnclume => new MovingEnclumeActions(this);

    // GareStation
    private readonly InputActionMap m_GareStation;
    private List<IGareStationActions> m_GareStationActionsCallbackInterfaces = new List<IGareStationActions>();
    private readonly InputAction m_GareStation_Left;
    private readonly InputAction m_GareStation_Right;
    private readonly InputAction m_GareStation_Buy;
    private readonly InputAction m_GareStation_Leave;
    public struct GareStationActions
    {
        private @InputAsset m_Wrapper;
        public GareStationActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_GareStation_Left;
        public InputAction @Right => m_Wrapper.m_GareStation_Right;
        public InputAction @Buy => m_Wrapper.m_GareStation_Buy;
        public InputAction @Leave => m_Wrapper.m_GareStation_Leave;
        public InputActionMap Get() { return m_Wrapper.m_GareStation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GareStationActions set) { return set.Get(); }
        public void AddCallbacks(IGareStationActions instance)
        {
            if (instance == null || m_Wrapper.m_GareStationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GareStationActionsCallbackInterfaces.Add(instance);
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Buy.started += instance.OnBuy;
            @Buy.performed += instance.OnBuy;
            @Buy.canceled += instance.OnBuy;
            @Leave.started += instance.OnLeave;
            @Leave.performed += instance.OnLeave;
            @Leave.canceled += instance.OnLeave;
        }

        private void UnregisterCallbacks(IGareStationActions instance)
        {
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Buy.started -= instance.OnBuy;
            @Buy.performed -= instance.OnBuy;
            @Buy.canceled -= instance.OnBuy;
            @Leave.started -= instance.OnLeave;
            @Leave.performed -= instance.OnLeave;
            @Leave.canceled -= instance.OnLeave;
        }

        public void RemoveCallbacks(IGareStationActions instance)
        {
            if (m_Wrapper.m_GareStationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGareStationActions instance)
        {
            foreach (var item in m_Wrapper.m_GareStationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GareStationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GareStationActions @GareStation => new GareStationActions(this);

    // Lobby
    private readonly InputActionMap m_Lobby;
    private List<ILobbyActions> m_LobbyActionsCallbackInterfaces = new List<ILobbyActions>();
    private readonly InputAction m_Lobby_MoveLobby;
    private readonly InputAction m_Lobby_Validate;
    public struct LobbyActions
    {
        private @InputAsset m_Wrapper;
        public LobbyActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLobby => m_Wrapper.m_Lobby_MoveLobby;
        public InputAction @Validate => m_Wrapper.m_Lobby_Validate;
        public InputActionMap Get() { return m_Wrapper.m_Lobby; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LobbyActions set) { return set.Get(); }
        public void AddCallbacks(ILobbyActions instance)
        {
            if (instance == null || m_Wrapper.m_LobbyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LobbyActionsCallbackInterfaces.Add(instance);
            @MoveLobby.started += instance.OnMoveLobby;
            @MoveLobby.performed += instance.OnMoveLobby;
            @MoveLobby.canceled += instance.OnMoveLobby;
            @Validate.started += instance.OnValidate;
            @Validate.performed += instance.OnValidate;
            @Validate.canceled += instance.OnValidate;
        }

        private void UnregisterCallbacks(ILobbyActions instance)
        {
            @MoveLobby.started -= instance.OnMoveLobby;
            @MoveLobby.performed -= instance.OnMoveLobby;
            @MoveLobby.canceled -= instance.OnMoveLobby;
            @Validate.started -= instance.OnValidate;
            @Validate.performed -= instance.OnValidate;
            @Validate.canceled -= instance.OnValidate;
        }

        public void RemoveCallbacks(ILobbyActions instance)
        {
            if (m_Wrapper.m_LobbyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILobbyActions instance)
        {
            foreach (var item in m_Wrapper.m_LobbyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LobbyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LobbyActions @Lobby => new LobbyActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
    }
    public interface ITurretActions
    {
        void OnAim(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IMovingEnclumeActions
    {
        void OnMoveEnclume(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IGareStationActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnBuy(InputAction.CallbackContext context);
        void OnLeave(InputAction.CallbackContext context);
    }
    public interface ILobbyActions
    {
        void OnMoveLobby(InputAction.CallbackContext context);
        void OnValidate(InputAction.CallbackContext context);
    }
}
